metadata:
  id: 21da5544-410e-5958-9e8d-bb2e9ab02fe5
  name: Minimize the admission of containers with capabilities assigned (Manual)
  profile_applicability: |
    * Level 2 - Master Node
  description: |
    Do not generally permit containers with capabilities
  rationale: >
    Containers run with a default set of capabilities as assigned by the
    Container Runtime. Capabilities are parts of the rights generally granted on
    a Linux system to the root user. In many cases applications running in
    containers do not require any capabilities to operate, so from the
    perspective of the principal of least privilege use of capabilities should
    be minimized.
  audit: |
    Get the set of PSPs with the following command:
    ```
    kubectl get psp
    ```
    For each PSP, check whether capabilities have been forbidden:
    ```
    kubectl get psp <name> -o=jsonpath='{.spec.requiredDropCapabilities}'
    ```
  remediation: |
    Review the use of capabilites in applications runnning on your cluster.
    Where
    a namespace
    contains applicaions which do not require any Linux capabities to operate consider adding
    a PSP which forbids the admission of containers which do not drop all capabilities.
  impact: |
    Pods with containers require capabilities to operate will not be permitted.
  default_value: |
    By default, PodSecurityPolicies are not defined.
  references: |
    1. [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies)
    2. [https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/](https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/)
  section: Pod Security Standards
  version: "1.0"
  tags:
    - CIS
    - Kubernetes
    - CIS 5.2.10
    - Pod Security Standards
  benchmark:
    name: CIS Kubernetes V1.20
    version: v1.0.0
