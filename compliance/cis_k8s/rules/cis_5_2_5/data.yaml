metadata:
  id: c346ffdb-c68b-58e8-b9bf-f8e946cfd1fd
  name: Minimize the admission of containers with allowPrivilegeEscalation (Automated)
  profile_applicability: |
    * Level 1 - Master Node
  description: >
    Do not generally permit containers to be run with the
    `allowPrivilegeEscalation` flag set to true.
  rationale: >
    A container running with the `allowPrivilegeEscalation` flag set to `true`
    may have processes that can gain more privileges than their parent. There
    should be at least one PodSecurityPolicy (PSP) defined which does not permit
    containers to allow privilege escalation. The option exists (and is
    defaulted to true) to permit setuid binaries to run. If you have need to run
    containers which use setuid binaries or require privilege escalation, this
    should be defined in a separate PSP and you should carefully check RBAC
    controls to ensure that only limited service accounts and users are given
    permission to access that PSP.
  audit: |
    Get the set of PSPs with the following command:
    ```
    kubectl get psp
    ```
    For each PSP, check whether privileged is enabled:
    ```
    kubectl get psp <name> -o=jsonpath='{.spec.allowPrivilegeEscalation}'
    ```
    Verify that there is at least one PSP which does not return true.
  remediation: |
    Create a PSP as described in the Kubernetes documentation, ensuring that the
    `.spec.allowPrivilegeEscalation` field is omitted or set to false.
  impact: >
    Pods defined with `spec.allowPrivilegeEscalation: true` will not be
    permitted unless they are run under a specific PSP.
  default_value: |
    By default, PodSecurityPolicies are not defined.
  references: |
    1. [https://kubernetes.io/docs/concepts/policy/pod-security-policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy)
  section: Pod Security Policies
  version: "1.0"
  tags:
    - CIS
    - Kubernetes
    - CIS 5.2.5
    - Pod Security Policies
  benchmark:
    name: CIS Kubernetes V1.20
    version: v1.0.0
