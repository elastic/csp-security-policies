metadata:
  id: 0d2c3f44-85d6-53ad-947a-99b6ad1f16fe
  name: Minimize the admission of privileged containers (Automated)
  profile_applicability: |
    * Level 1 - Master Node
  description: >
    Do not generally permit containers to be run with the
    `securityContext.privileged` flag set to `true`.
  rationale: >
    Privileged containers have access to all Linux Kernel capabilities and
    devices. A container running with full privileges can do almost everything
    that the host can do. This flag exists to allow special use-cases, like
    manipulating the network stack and accessing devices. There should be at
    least one PodSecurityPolicy (PSP) defined which does not permit privileged
    containers. If you need to run privileged containers, this should be defined
    in a separate PSP and you should carefully check RBAC controls to ensure
    that only limited service accounts and users are given permission to access
    that PSP.
  audit: |
    Get the set of PSPs with the following command:
    ```
    kubectl get psp
    ```
    For each PSP, check whether privileged is enabled:
    ```
    kubectl get psp <name> -o=jsonpath='{.spec.privileged}'
    ```
    Verify that there is at least one PSP which does not return `true`.
  remediation: |
    Create a PSP as described in the Kubernetes documentation, ensuring that the
    `.spec.privileged` field is omitted or set to `false`.
  impact: >
    Pods defined with `spec.containers[].securityContext.privileged: true` will
    not be permitted.
  default_value: |
    By default, PodSecurityPolicies are not defined.
  references: |
    1. [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies)
  section: Pod Security Standards
  version: "1.0"
  tags:
    - CIS
    - Kubernetes
    - CIS 5.2.1
    - Pod Security Standards
  benchmark:
    name: CIS Kubernetes V1.20
    version: v1.0.0
